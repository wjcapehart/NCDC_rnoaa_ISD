start_year = c(1976, 2020)
end_year   = start_year + period_span - 1
region_outnm  = "CHEY"    #  [lat | 74] x [lon | 204]
#region_outnm  = "BHLS"    #  [lat | 58] x [lon |  66]
#region_outnm  = "KRAP"   #  [lat |  4] x [lon |   5]
region_outnm = "SDAK"
if (region_outnm == "CHEY"){
south = 42.4
north = 45.51
west  = -106.251 + 360
east  =  -97.74 + 360  # Full Cheyenne Basin
subset_region = "Cheyenne River Basin"
}
if (region_outnm == "BHLS") {
# Target Coordinates for Back Hills
south = 42.580502
north = 45.000500
west =  -104.83100 + 360
east =  -102.09100 + 360
subset_region = "Black Hills Area"
}
if (region_outnm == "KRAP") {
# Target Coordinates for Back Hills
south = 44.0805 - 0.25
north = 44.0805 + 0.25
west =  -103.2310 - 0.25 + 360
east =  -103.2310 + 0.25 + 360
subset_region = "Rapid City Area"
}
if (region_outnm == "SDAK") {
# Target Coordinates for Back Hills
south = 42.49 - 0.25
north = 46.03 + 0.25
west =  -104.21 + 360
east =  - 96.21 + 360
subset_region = "Rapid City Area"
}
historical_full_url   = "https://cida.usgs.gov/thredds/dodsC/loca_historical"
future_full_url       = "https://cida.usgs.gov/thredds/dodsC/loca_future"
ensemble_model =  c("ACCESS1-0_r1i1p1",
"ACCESS1-3_r1i1p1",
"CCSM4_r6i1p1",
"CESM1-BGC_r1i1p1",
"CESM1-CAM5_r1i1p1",
"CMCC-CMS_r1i1p1",
"CMCC-CM_r1i1p1",
"CNRM-CM5_r1i1p1",
"CSIRO-Mk3-6-0_r1i1p1",
"CanESM2_r1i1p1",
"FGOALS-g2_r1i1p1",
"GFDL-CM3_r1i1p1",
"GFDL-ESM2G_r1i1p1",
"GFDL-ESM2M_r1i1p1",
"HadGEM2-AO_r1i1p1",
"HadGEM2-CC_r1i1p1",
"HadGEM2-ES_r1i1p1",
"IPSL-CM5A-LR_r1i1p1",
"IPSL-CM5A-MR_r1i1p1",
"MIROC-ESM-CHEM_r1i1p1",
"MIROC-ESM_r1i1p1",
"MIROC5_r1i1p1",
"MPI-ESM-LR_r1i1p1",
"MPI-ESM-MR_r1i1p1",
"MRI-CGCM3_r1i1p1",
"NorESM1-M_r1i1p1",
"bcc-csm1-1-m_r1i1p1")
n_ensembles = length(ensemble_model)
nc.histor = nc_open(filename = historical_full_url)
nc.future = nc_open(filename = future_full_url)
lat_full = ncvar_get(nc      = nc.histor, # netcdf file ID
varid   = "lat",     # variable name from file
verbose = FALSE      # print diagnostic data
)
lon_full = ncvar_get(nc      = nc.histor, # netcdf file ID
varid   = "lon",     # variable name from file
verbose = FALSE      # print diagnostic data
)
i_min = which(  abs(lon_full-west) == min(abs(lon_full-west)) )
i_max = which(  abs(lon_full-east) == min(abs(lon_full-east)) )
j_min = which( abs(lat_full-south) == min(abs(lat_full-south)) )
j_max = which( abs(lat_full-north) == min(abs(lat_full-north)) )
nx    = i_max - i_min + 1
ny    = j_max - j_min + 1
longitude = lon_full[i_min:i_max] - 360.0
latitude  = lat_full[j_min:j_max]
remove(east,
west,
north,
south,
lon_full,
lat_full,
historical_full_url,
future_full_url)
# get time values
# historical time values
time_hist = ncvar_get(nc    = nc.histor,
varid = "time")
tunits    = ncatt_get(nc      = nc.histor,
varid   = "time",
attname = "units")
tustr     = strsplit(tunits$value, " ")
time_reference_point_hist = paste(unlist(tustr)[3],
unlist(tustr)[4])
time_hist = as.Date(x      = time_hist,
origin = time_reference_point_hist,
ts     = "UTC")
# future time values
time_futr = ncvar_get(nc    = nc.future,
varid = "time")
tunits    = ncatt_get(nc      = nc.future,
varid   = "time",
attname = "units")
tustr     = strsplit(tunits$value, " ")
time_reference_point_futr = paste(unlist(tustr)[3],
unlist(tustr)[4])
time_futr = as.Date(x      = time_futr,
origin = time_reference_point_futr,
ts     = "UTC")
remove(tunits,
tustr)
value2d_plusTime = array(data = 0. ,
dim      = c(nx, ny, n_ensembles),
dimnames = list(longitude,
latitude,
ensemble_model))
variable_name = paste("tasmax",
"_",
ensemble_model[1],
"_",
"historical",
sep = "")
value2d     = ncvar_get(nc      = nc.histor,
varid   = variable_name,
start   = c(i_min, j_min, 1),
count   = c(   nx,    ny, 1))
colnames(value2d) <- latitude
rownames(value2d) <- longitude
image(x    = longitude,
y    = latitude,
z    = value2d,
main = paste(variable_name,time_hist[1]))
map(database = "county",
add      = TRUE,
col      = "black",
lwd      = 1)
map(database = "state",
add      = TRUE,
col      = "black",
lwd      = 2)
period = 1
ensemble_mean = value2d_plusTime
ensemble_stdv = value2d_plusTime
start_period = as.Date(x  = paste(start_year[period],
"-01-01 00:00:00 UTC",
sep=""),
origin = time_reference_point_futr,
tz = "UTC")
end_period   = as.Date(x  = paste(end_year[period],
"-12-31 00:00:00 UTC",
sep=""),
origin = time_reference_point_futr,
tz = "UTC")
t_min = which( time_hist == start_period )
t_max = which( time_hist == end_period )
(max(time_hist))
(max(end_period))
end_period-max(time_hist)
max(time_hist) == end_period
max(time_hist) == end_period+0.5
library("ncdf4")
library("lubridate") # processing dates and time
library("maps")
period_span     = 30
start_year = c(1976, 2020)
end_year   = start_year + period_span - 1
region_outnm  = "CHEY"    #  [lat | 74] x [lon | 204]
#region_outnm  = "BHLS"    #  [lat | 58] x [lon |  66]
#region_outnm  = "KRAP"   #  [lat |  4] x [lon |   5]
region_outnm = "SDAK"
if (region_outnm == "CHEY"){
south = 42.4
north = 45.51
west  = -106.251 + 360
east  =  -97.74 + 360  # Full Cheyenne Basin
subset_region = "Cheyenne River Basin"
}
if (region_outnm == "BHLS") {
# Target Coordinates for Back Hills
south = 42.580502
north = 45.000500
west =  -104.83100 + 360
east =  -102.09100 + 360
subset_region = "Black Hills Area"
}
if (region_outnm == "KRAP") {
# Target Coordinates for Back Hills
south = 44.0805 - 0.25
north = 44.0805 + 0.25
west =  -103.2310 - 0.25 + 360
east =  -103.2310 + 0.25 + 360
subset_region = "Rapid City Area"
}
if (region_outnm == "SDAK") {
# Target Coordinates for Back Hills
south = 42.49 - 0.25
north = 46.03 + 0.25
west =  -104.21 + 360
east =  - 96.21 + 360
subset_region = "Rapid City Area"
}
historical_full_url   = "https://cida.usgs.gov/thredds/dodsC/loca_historical"
future_full_url       = "https://cida.usgs.gov/thredds/dodsC/loca_future"
ensemble_model =  c("ACCESS1-0_r1i1p1",
"ACCESS1-3_r1i1p1",
"CCSM4_r6i1p1",
"CESM1-BGC_r1i1p1",
"CESM1-CAM5_r1i1p1",
"CMCC-CMS_r1i1p1",
"CMCC-CM_r1i1p1",
"CNRM-CM5_r1i1p1",
"CSIRO-Mk3-6-0_r1i1p1",
"CanESM2_r1i1p1",
"FGOALS-g2_r1i1p1",
"GFDL-CM3_r1i1p1",
"GFDL-ESM2G_r1i1p1",
"GFDL-ESM2M_r1i1p1",
"HadGEM2-AO_r1i1p1",
"HadGEM2-CC_r1i1p1",
"HadGEM2-ES_r1i1p1",
"IPSL-CM5A-LR_r1i1p1",
"IPSL-CM5A-MR_r1i1p1",
"MIROC-ESM-CHEM_r1i1p1",
"MIROC-ESM_r1i1p1",
"MIROC5_r1i1p1",
"MPI-ESM-LR_r1i1p1",
"MPI-ESM-MR_r1i1p1",
"MRI-CGCM3_r1i1p1",
"NorESM1-M_r1i1p1",
"bcc-csm1-1-m_r1i1p1")
n_ensembles = length(ensemble_model)
nc.histor = nc_open(filename = historical_full_url)
nc.future = nc_open(filename = future_full_url)
lat_full = ncvar_get(nc      = nc.histor, # netcdf file ID
varid   = "lat",     # variable name from file
verbose = FALSE      # print diagnostic data
)
lon_full = ncvar_get(nc      = nc.histor, # netcdf file ID
varid   = "lon",     # variable name from file
verbose = FALSE      # print diagnostic data
)
i_min = which(  abs(lon_full-west) == min(abs(lon_full-west)) )
i_max = which(  abs(lon_full-east) == min(abs(lon_full-east)) )
j_min = which( abs(lat_full-south) == min(abs(lat_full-south)) )
j_max = which( abs(lat_full-north) == min(abs(lat_full-north)) )
nx    = i_max - i_min + 1
ny    = j_max - j_min + 1
longitude = lon_full[i_min:i_max] - 360.0
latitude  = lat_full[j_min:j_max]
remove(east,
west,
north,
south,
lon_full,
lat_full,
historical_full_url,
future_full_url)
# get time values
# historical time values
time_hist = ncvar_get(nc    = nc.histor,
varid = "time")
tunits    = ncatt_get(nc      = nc.histor,
varid   = "time",
attname = "units")
tustr     = strsplit(tunits$value, " ")
time_reference_point_hist = paste(unlist(tustr)[3],
unlist(tustr)[4])
time_hist = as.Date(x      = time_hist,
origin = time_reference_point_hist,
ts     = "UTC")
# future time values
time_futr = ncvar_get(nc    = nc.future,
varid = "time")
tunits    = ncatt_get(nc      = nc.future,
varid   = "time",
attname = "units")
tustr     = strsplit(tunits$value, " ")
time_reference_point_futr = paste(unlist(tustr)[3],
unlist(tustr)[4])
time_futr = as.Date(x      = time_futr,
origin = time_reference_point_futr,
ts     = "UTC")
remove(tunits,
tustr)
value2d_plusTime = array(data = 0. ,
dim      = c(nx, ny, n_ensembles),
dimnames = list(longitude,
latitude,
ensemble_model))
variable_name = paste("tasmax",
"_",
ensemble_model[1],
"_",
"historical",
sep = "")
value2d     = ncvar_get(nc      = nc.histor,
varid   = variable_name,
start   = c(i_min, j_min, 1),
count   = c(   nx,    ny, 1))
colnames(value2d) <- latitude
rownames(value2d) <- longitude
image(x    = longitude,
y    = latitude,
z    = value2d,
main = paste(variable_name,time_hist[1]))
map(database = "county",
add      = TRUE,
col      = "black",
lwd      = 1)
map(database = "state",
add      = TRUE,
col      = "black",
lwd      = 2)
period = 1
ensemble_mean = value2d_plusTime
ensemble_stdv = value2d_plusTime
start_period = as.Date(x  = paste(start_year[period],
"-01-01 12:00:00 UTC",
sep=""),
origin = time_reference_point_futr,
tz = "UTC")
end_period   = as.Date(x  = paste(end_year[period],
"-12-31 12:00:00 UTC",
sep=""),
origin = time_reference_point_futr,
tz = "UTC")
t_min = which( time_hist == start_period )
t_max = which( time_hist == end_period )
(max(time_hist))
(max(end_period))
end_period-max(time_hist)
period_span     = 30
start_year = c(1976, 2020)
end_year   = start_year + period_span - 1
start_period = as.Date(x  = paste(start_year,
"-01-01 00:00:00 UTC",
sep=""),
origin = time_reference_point_futr,
tz = "UTC")
end_period   = as.Date(x  = paste(end_year,
"-12-31 00:00:00 UTC",
sep=""),
origin = time_reference_point_futr,
tz = "UTC")
as.numeric(start_period)
as.numeric(max(time_hist))
as.numeric(end_period)
start_period = as.Date(x  = paste(start_year,
"-01-01 00:00:00 UTC",
sep=""),
origin = time_reference_point_futr,
tz = "UTC") + 0.5
end_period   = as.Date(x  = paste(end_year,
"-12-31 00:00:00 UTC",
sep=""),
origin = time_reference_point_futr,
tz = "UTC") + 0.5
as.numeric(end_period)
as.numeric(max(time_hist))
t_min = which( time_hist == start_period )
t_max = which( time_hist == end_period )
period = 2
ensemble_mean = value2d_plusTime
ensemble_stdv = value2d_plusTime
t_min = which( time_hist == start_period )
t_max = which( time_hist == end_period )
time_hist == start_period
start_year = c(1976, 2020)
end_year   = start_year + period_span - 1
time_futr.year = year(time_futr)
time_hist.year = year(time_hist)
```
time_futr.year = year(time_futr)
time_hist.year = year(time_hist)
```
year(time_futr)
year(time_hist)
time_futr_year = year(time_futr)
time_hist_year = year(time_hist)
t_min = which( time_hist_year == start_year[period])
t_max = which( time_hist_year == end_year[period] )
time_hist_year
which( time_hist_year == start_year[period])
start_year[period]
period = 1
ensemble_mean = value2d_plusTime
ensemble_stdv = value2d_plusTime
t_min = which( time_hist_year == start_year[period])
t_max = which( time_hist_year == end_year[period] )
t_min = min( which( time_hist_year == start_year[period]) )
t_max = max( which( time_hist_year == end_year[period]) )
nt    = t_max - t_min + 1
debugSource('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
debugSource('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
debugSource('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
targ_data$precip_01hr  != NA
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
print(max(targ_data$air_pressure))
print(max(targ_data$air_pressure,rm.na=TRUE))
plot, targ_data$air_pressure
plot(targ_data$air_pressure)
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
is.na(targ_data$air_pressure)
targ_data$air_pressure
plot(targ_data$air_pressure)
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
plot(targ_time_series$press_msl_hPa)
targ_data$precip_01hr
plot(targ_data$precip_01hr)
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
plot(targ_data$date_time, targ_data$air_pressure)
storage_directory = ""
# setwd (storage_directory)
library("rnoaa")
library("isdparser")
library("lubridate")
library("ncdf4")
library("dplyr")
library("openair")
stations_near_targ = isd_stations_search(lat    =  -20.4545,  # degrees_north
lon    = 16.6645,  # degrees_east
radius =   300.)  # km
stations_near_targ = isd_stations_search(lat    = 44,  # degrees_north
lon    = -102,  # degrees_east
radius =   300.)  # km
print(stations_near_targ)
stations_near_targ = isd_stations_search(lat    = 44,  # degrees_north
lon    = -103,  # degrees_east
radius =   300.)  # km
print(stations_near_targ)
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
debugSource('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop_zoo.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop_zoo.R')
stations_near_targ = isd_stations_search(lat    =  -20.4545,  # degrees_north
lon    = 16.6645,  # degrees_east
radius =   300.)  # km
stations_near_targ = isd_stations_search(lat    = 44,  # degrees_north
lon    = -103,  # degrees_east
radius =   300.)  # km
print(stations_near_targ)
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
storage_directory = "H:/Climate R Directory"
storage_directory = ""
# setwd (storage_directory)
library("rnoaa")
library("isdparser")
library("lubridate")
library("ncdf4")
library("dplyr")
library("openair")
stations_near_targ = isd_stations_search(lat    =  -20.4545,  # degrees_north
lon    = 16.6645,  # degrees_east
radius =   300.)  # km
stations_near_targ = isd_stations_search(lat    = 44,  # degrees_north
lon    = -103,  # degrees_east
radius =   300.)  # km
print(stations_near_targ)
station_list_number = 2 # indicing starts at 1   # add manually
station_list_number_label = 1 # indicing starts at 1   # add manually
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
packages.install(XLConnect)
package.install(XLConnect)
install.packages(XLConnect)
install.packages(XLConnectJars)
install.packages(XLConnectJars)
install.packages()
install.packages(ncdf4)
install.packages("ncdf4")
install.packages("XLConnect")
install.packages("XLConnectJars")
exit
q()
