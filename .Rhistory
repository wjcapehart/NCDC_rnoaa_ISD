y      = targ_data$GF1_total_cloud_cover_fraction,
method = "linear",
xout   = hour_time)$y
targ_time_series$press_msl_hPa    = approx(x      = targ_data$date_time,
y      = targ_data$air_pressure,
method = "linear",
xout   = hour_time)$y
targ_time_series$wind_spd_ms      = approx(x      = targ_data$date_time,
y      = targ_data$wind_speed,
method = "linear",
xout   = hour_time)$y
targ_time_series$wind_dir_degrees  = approx(x     = targ_data$date_time,
y      = targ_data$wind_direction,
method = "linear",
xout   = hour_time)$y
targ_time_series$ISD_precip_01hr   = approx(x      = targ_data$date_time,
y      = targ_data$precip_01hr,
method = "constant",
xout   = hour_time)$y
targ_time_series$ISD_precip_03hr   = approx(x      = targ_data$date_time,
y      = targ_data$precip_03hr,
method = "constant",
xout   = hour_time)$y
targ_time_series$ISD_precip_06hr   = approx(x      = targ_data$date_time,
y      = targ_data$precip_06hr,
method = "constant",
xout   = hour_time)$y
targ_time_series$ISD_precip_12hr   = approx(x      = targ_data$date_time,
y      = targ_data$precip_12hr,
method = "constant",
xout   = hour_time)$y
library("lubridate")
library("isdparser")
library("rnoaa")
library("openair")
library("ncdf4")
stations_near_targ = isd_stations_search(lat    =   44,  # degrees_north
lon    = -103,  # degrees_east
radius =  100)  # km
file_title_string = "KRAP"
name_of_station   = "Rapid City Regional Airport"
print(stations_near_targ)
target_usaf = 726620
target_wban =  24090
target_year =   2010
station_name_label = paste(name_of_station,
target_year)
output_file_name = paste(file_title_string,
target_year,
".csv",
sep="")
targ_data = isd(usaf = target_usaf,  # your usaf number
wban = target_wban,  # your wban number
year = target_year,  # your year
progress=TRUE)       # shows prograss as you go
print(targ_data)
targ_data$date_time = ymd_hm(sprintf("%s %s",
as.character(targ_data$date),
targ_data$time))
targ_data$date = targ_data$date_time
targ_data$temperature[targ_data$temperature == "+9999"]                   = NA
targ_data$temperature_dewpoint[targ_data$temperature_dewpoint == "+9999"] = NA
targ_data$air_pressure[targ_data$air_pressure == "99999"]                 = NA
targ_data$wind_speed[targ_data$wind_speed == "9999"]                     = NA
targ_data$wind_direction[targ_data$wind_direction == "999"]             = NA
precip_workspace_time_interval = as.numeric(targ_data$AA1_period_quantity_hrs)
precip_workspace_depth         = as.numeric(targ_data$AA1_depth)
precip_workspace_depth[precip_workspace_depth == 9999]                   = NA
precip_workspace_depth_01hrly =  precip_workspace_depth
precip_workspace_depth_03hrly =  precip_workspace_depth
precip_workspace_depth_06hrly =  precip_workspace_depth
precip_workspace_depth_12hrly =  precip_workspace_depth
precip_workspace_depth_24hrly =  precip_workspace_depth
precip_workspace_depth_01hrly[precip_workspace_time_interval != 01]  =  NA
precip_workspace_depth_03hrly[precip_workspace_time_interval != 03]  =  NA
precip_workspace_depth_06hrly[precip_workspace_time_interval != 06]  =  NA
precip_workspace_depth_12hrly[precip_workspace_time_interval != 12]  =  NA
precip_workspace_depth_24hrly[precip_workspace_time_interval != 24]  =  NA
targ_data$precip_01hr = precip_workspace_depth_01hrly
targ_data$precip_03hr = precip_workspace_depth_03hrly
targ_data$precip_06hr = precip_workspace_depth_06hrly
targ_data$precip_12hr = precip_workspace_depth_12hrly
targ_data$precip_24hr = precip_workspace_depth_24hrly
targ_data = isd_transform(targ_data)
# patch the wind direction so it's 0 degrees when the wind speed is missing
targ_data$wind_direction[targ_data$wind_speed == 0]             = 0
targ_data$GF1_total_cloud_cover_fraction = as.numeric(targ_data$GF1_coverage)
# 00: None, SKC or CLR
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==00] = 0.00
# 01: One okta - 1/10 or less but not zero
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==01] = 1.0 / 8.0
# 02: Two oktas - 2/10 ‑ 3/10, or FEW
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==02] = 2.0 / 8.0
# 03: Three oktas - 4/10
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==03] = 3.0 / 8.0
# 04: Four oktas - 5/10, or SCT
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==04] = 4.0 / 8.0
# 05: Five oktas - 6/10
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==05] = 5.0 / 8.0
# 06: Six oktas - 7/10 ‑ 8/10
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==06] = 6.0 / 8.0
# 07: Seven oktas - 9/10 or more but not 10/10, or BKN
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==07] = 7.0 / 8.0
# 08: Eight oktas - 10/10, or OVC
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==08] = 8.0 / 8.0
# 09: Sky obscured, or cloud amount cannot be estimated
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==09] = 8.0 / 8.0
# 10: Partial obscuration
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==10] = 4.0 / 8.0
# 11: Thin scattered
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==11] = 2.0 / 8.0
# 12: Scattered
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==12] = 4.0 / 8.0
# 13: Dark scattered
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==13] = 5.0 / 8.0
# 14: Thin broken
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==14] = 6.0 / 8.0
# 15: Broken
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==15] = 7.0 / 8.0
# 16: Dark broken
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==16] = 8.0 / 8.0
# 17: Thin overcast
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==17] = 4.0 / 8.0
# 18: Overcast
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==18] = 8.0 / 8.0
# 19: Dark overcast
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==19] = 8.0 / 8.0
# 99: Missing
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==99] = NA
plot(x       = targ_data$date_time,
y       = targ_data$temperature,
type    = "l",
col     = "red",
lwd     = 1.5,
cex.lab = 1.25,
xlab    = "Date",
ylab    = "Temperature (deg C)",
main    = station_name_label)
plot(x       = targ_data$date_time,
y       = targ_data$temperature_dewpoint,
type    = "l",
col     = "darkgreen",
lwd     = 1.5,
cex.lab = 1.25,
xlab    = "Date",
ylab    = "Dew Point (deg C)",
main    = station_name_label)
plot(x       = targ_data$date_time,
y       = targ_data$GF1_total_cloud_cover_fraction,
type    = "l",
col     = "grey",
lwd     = 1.5,
cex.lab = 1.25,
xlab    = "Date",
ylab    = "Cloud Cover (fraction)",
main    = station_name_label)
plot(x       = targ_data$date_time,
y       = targ_data$air_pressure,
type    = "l",
col     = "blue",
lwd     = 1.5,
cex.lab = 1.25,
xlab    = "Date",
ylab    = "MSL Pressure (mb)",
main    = station_name_label)
plot(x       = targ_data$date_time,
y       = targ_data$wind_speed,
type    = "l",
col     = "darkblue",
lwd     = 1.5,
cex.lab = 1.25,
xlab    = "Date",
ylab    = "Wind Speed (m s-1)",
main    = station_name_label)
windrose_frame = data.frame(date      = targ_data$date_time,
ws        = targ_data$wind_speed,
wd        = targ_data$wind_direction,
longitude = targ_data$longitude,
latitude  = targ_data$latitude)
windRose(mydata     = windrose_frame,
ws         = "ws",
wd         = "wd",
type       = "year",
hemisphere = "northern",
main       = station_name_label)
windRose(mydata     = windrose_frame,
ws         = "ws",
wd         = "wd",
type       = "season",
hemisphere = "northern",
main       = station_name_label)
start_date = as.POSIXct(paste(target_year,
"-01-01 00:00:00 UTC",
sep=""),
tz = "UTC")
end_date   = as.POSIXct(paste(target_year,
"-12-31 00:00:00 UTC",
sep=""),
tz = "UTC")
hour_time = seq.POSIXt(from = start_date,
to   = end_date,
by   = "1 hour",
tz   = "UTC")
targ_time_series                  = data.frame(date = hour_time)
targ_time_series$temperature_degC = approx(x      = targ_data$date_time,
y      = targ_data$temperature,
method = "linear",
xout   = hour_time)$y
targ_time_series$dewpoint_degC    = approx(x      = targ_data$date_time,
y      = targ_data$temperature_dewpoint,
method = "linear",
xout   = hour_time)$y
targ_time_series$cloud_fraction   = approx(x      = targ_data$date_time,
y      = targ_data$GF1_total_cloud_cover_fraction,
method = "linear",
xout   = hour_time)$y
targ_time_series$press_msl_hPa    = approx(x      = targ_data$date_time,
y      = targ_data$air_pressure,
method = "linear",
xout   = hour_time)$y
targ_time_series$wind_spd_ms      = approx(x      = targ_data$date_time,
y      = targ_data$wind_speed,
method = "linear",
xout   = hour_time)$y
targ_time_series$wind_dir_degrees  = approx(x     = targ_data$date_time,
y      = targ_data$wind_direction,
method = "linear",
xout   = hour_time)$y
targ_time_series$ISD_precip_01hr   = approx(x      = targ_data$date_time,
y      = targ_data$precip_01hr,
method = "constant",
xout   = hour_time)$y
targ_time_series$ISD_precip_03hr   = approx(x      = targ_data$date_time,
y      = targ_data$precip_03hr,
method = "constant",
xout   = hour_time)$y
targ_time_series$ISD_precip_06hr   = approx(x      = targ_data$date_time,
y      = targ_data$precip_06hr,
method = "constant",
xout   = hour_time)$y
#targ_time_series$ISD_precip_12hr   = approx(x      = targ_data$date_time,
#                                            y      = targ_data$precip_12hr,
#                                            method = "constant",
#                                            xout   = hour_time)$y
targ_time_series$ISD_precip_24hr   = approx(x      = targ_data$date_time,
y      = targ_data$precip_24hr,
method = "constant",
xout   = hour_time)$y
print(targ_time_series)
output_file_name = paste(file_title_string,
"_HOURLY_",
target_year,
".csv",
sep="")
write.table(x    = targ_time_series,
file = output_file_name,
sep  =", ",
row.names = FALSE)
targ_time_series_raw                      = data.frame(date = targ_data$date_time)
targ_time_series_raw$temperature_dewpoint = targ_data$temperature_dewpoint
targ_time_series_raw$cloud_cover_fraction = targ_data$GF1_total_cloud_cover_fraction
targ_time_series_raw$air_pressure         = targ_data$air_pressure
targ_time_series_raw$wind_speed       = targ_data$wind_speed
targ_time_series_raw$wind_dir_degrees = targ_data$wind_direction
targ_time_series_raw$ISD_precip_01hr = targ_data$precip_01hr
targ_time_series_raw$ISD_precip_03hr = targ_data$precip_03hr
targ_time_series_raw$ISD_precip_06hr = targ_data$precip_06hr
targ_time_series_raw$ISD_precip_12hr = targ_data$precip_12hr
targ_time_series_raw$ISD_precip_24hr = targ_data$precip_24hr
output_file_name = paste(file_title_string,
"_RAW_",
target_year,
".csv",
sep="")
write.table(x    = targ_time_series_raw,
file = output_file_name,
sep  =", ",
row.names = FALSE)
library("rnoaa")
library("isdparser")
library("lubridate")
library("ncdf4")
tmax_full_field        = sorted_data$tmax
tmax_full_field$tmax = tmax_full_field$tmax / 10
tmin_full_field        = sorted_data$tmin
tmin_full_field$tmin = tmin_full_field$tmin / 10
prcp_full_field        = sorted_data$prcp
prcp_full_field$prcp = prcp_full_field$prcp / 10
snow_full_field = sorted_data$snow
snwd_full_field = sorted_data$snwd
remove(sorted_data)
Days_from_1970_01_01 = as.numeric( as.Date(Date) )
index_days = Days_from_1970_01_01 - min(Days_from_1970_01_01) + 1
tmax   = Days_from_1970_01_01
tmax[] = NA
tmin   = tmax
prcp   = tmax
snow   = tmax
snwd   = tmax
index_tmax =  as.numeric(tmax_full_field$date) - Days_from_1970_01_01[1] + 1
index_tmin =  as.numeric(tmin_full_field$date) - Days_from_1970_01_01[1] + 1
index_prcp =  as.numeric(prcp_full_field$date) - Days_from_1970_01_01[1] + 1
index_snow =  as.numeric(snow_full_field$date) - Days_from_1970_01_01[1] + 1
index_snwd =  as.numeric(snwd_full_field$date) - Days_from_1970_01_01[1] + 1
tmax[index_tmax] = tmax_full_field$tmax[index_tmax]
tmin[index_tmin] = tmin_full_field$tmin[index_tmin]
prcp[index_prcp] = prcp_full_field$prcp[index_prcp]
snow[index_snow] = snow_full_field$snow[index_snow]
snwd[index_snwd] = snwd_full_field$snwd[index_snwd]
plot(tmax)
plot(prcp)
where(index_days = index_tmax)
which(index_days == index_tmax)
View(prcp_full_field)
ncdc_end_yymmdd_split   = unlist(strsplit(x      = ncdc_end_yymmdd,
split  = "-"))
end_year  = ncdc_end_yymmdd_split[1]
end_month = ncdc_end_yymmdd_split[2]
end_day   = numberOfDays(ncdc_end_yymmdd)
ncdc_end_yymmdd_split   = unlist(strsplit(x      = ncdc_end_yymmdd,
split  = "-"))
end_year  = ncdc_end_yymmdd_split[1]
end_month = ncdc_end_yymmdd_split[2]
end_day   = numberOfDays(ncdc_end_yymmdd)
end_year  = ncdc_end_yymmdd_split[1]
end_month = ncdc_end_yymmdd_split[2]
end_day   = days_in_month(ncdc_end_yymmdd_split)
end_day   = days_in_month(as.Date(ncdc_end_yymmdd_split))
end_day   = days_in_month(as.Date(ncdc_end_yymmdd))
remove(ncdc_data)
index_tmax
index_tmax<max(index_days)
which(index_tmax<max(index_days))
which(index_tmax<=max(index_days))
which(index_tmax<=max(index_days))
tmax[which(index_tmax<=max(index_days))] = tmax_full_field$tmax[which(index_tmax<=max(index_days))]
tmin[which(index_tmin<=max(index_days))] = tmin_full_field$tmin[which(index_tmin<=max(index_days))]
prcp[which(index_prcp<=max(index_days))] = prcp_full_field$prcp[which(index_prcp<=max(index_days))]
snow[which(index_snow<=max(index_days))] = snow_full_field$snow[which(index_snow<=max(index_days))]
snwd[which(index_snwd<=max(index_days))] = snwd_full_field$snwd[which(index_snwd<=max(index_days))]
print(Date,tmax)
plot(Date,tmax)
match = which(index_days == index_tmax)
i = 1
i = 1
which(tmax_full_field$date == Date[i])
tmax[i] = tmax_full_field$tmax[which(tmax_full_field$date == Date[i])]
print(tmax)
tmax   = Days_from_1970_01_01
tmax[] = NA
tmin   = tmax
prcp   = tmax
snow   = tmax
snwd   = tmax
lenght(Date)
length(Date)
length(tmax)
length(t
tmax   = Days_from_1970_01_01
tmax[] = NA
tmin   = tmax
prcp   = tmax
snow   = tmax
snwd   = tmax
tmax   = Days_from_1970_01_01
tmax[] = NA
tmin   = tmax
prcp   = tmax
snow   = tmax
snwd   = tmax
tmax   = Days_from_1970_01_01
tmax[] = NA
tmin   = tmax
prcp   = tmax
snow   = tmax
snwd   = tmax
)
tmax   = Days_from_1970_01_01
tmax[] = NA
tmin   = tmax
prcp   = tmax
snow   = tmax
snwd   = tmax
i = 1
i = 1
index_tmax =  as.numeric(tmax_full_field$date) - Days_from_1970_01_01[1] + 1
print(tmax)
index_tmax =  as.numeric(tmax_full_field$date) - Days_from_1970_01_01[1] + 1
index_tmin =  as.numeric(tmin_full_field$date) - Days_from_1970_01_01[1] + 1
index_prcp =  as.numeric(prcp_full_field$date) - Days_from_1970_01_01[1] + 1
index_snow =  as.numeric(snow_full_field$date) - Days_from_1970_01_01[1] + 1
index_snwd =  as.numeric(snwd_full_field$date) - Days_from_1970_01_01[1] + 1
tmax[i] = tmax_full_field$tmax[which(tmax_full_field$date == Date[i])]
print(tmax)
tmin[i] = tmin_full_field$tmin[which(tmin_full_field$date == Date[i])]
tmin[i] = tmin_full_field$tmin[which(tmin_full_field$date == Date[i])]
prcp[i] = tmax_full_field$prcp[which(prcp_full_field$date == Date[i])]
snow[i] = tmax_full_field$snow[which(snow_full_field$date == Date[i])]
snwd[i] = snwd_full_field$snwd[which(tmax_full_field$date == Date[i])]
which( tmax_full_field$date == max(Date))
which( tmax_full_field$date == max(Date))
which( tmax_full_field$date == max(Date))
which( prcp_full_field$date == max(Date))
ti = which(index_tmax<=max(index_days))
ti = which(index_tmax<=max(index_days))
pi =  which(index_prcp<=max(index_days))
pi =  which(index_prcp<=max(index_days))
Date[1]=
Date[1]
print(Date[1])
print(prcp_full_field$date[1])
print(snow_full_field$date[1])
print(snow_full_field$date[1])
print(index_tmax[1])
print(index_snow[1])
print(index_snow[1])
as.numeric(tmax_full_field$date)
min(index_snwd)
min(index_snwd)
max(index_snwd)
max(index_days)
index_tmax = index_tmax[which(index_tmax<=max(index_days))]
index_tmax = index_tmax[which(index_tmax<=max(index_days))]
index_tmin = index_tmin[which(index_tmin<=max(index_days))]
index_prcp = index_prcp[which(index_prcp<=max(index_days))]
index_tmax = index_tmax[which(index_tmax<=max(index_days))]
index_tmin = index_tmin[which(index_tmin<=max(index_days))]
index_prcp = index_prcp[which(index_prcp<=max(index_days))]
index_snow = index_snow[which(index_snow<=max(index_days))]
index_snwd = index_snwd[which(index_snwd<=max(index_days))]
tmax[index_tmax] = tmax_full_field$tmax[index_tmax]
tmax[index_tmax] = tmax_full_field$tmax[index_tmax]
tmin[index_tmin] = tmin_full_field$tmin[index_tmin]
prcp[index_prcp] = prcp_full_field$prcp[index_prcp]
snow[index_snow] = snow_full_field$snow[index_snow]
snwd[index_snwd] = snwd_full_field$snwd[index_snwd]
print(Date,tmax)
plot(Date,tmax)
plot(x       = Date,
y       = tmax,
type    = "l",
col     = "red",
lwd     = 1.5,
cex.lab = 1.25,
xlab    = "Date",
ylab    = "Max Temperature (deg C)",
main    = station_name_label)
plot(x       = Date,
y       = tmax,
type    = "p",
pch     = ".",   # as points
col     = "red",
lwd     = 1.5,
cex.lab = 1.25,
xlab    = "Date",
ylab    = "Max Temperature (deg C)",
main    = station_name_label)
plot(x       = Date[1:3*365],
y       = tmax[1:3*365],
type    = "p",
pch     = ".",   # as points
col     = "red",
lwd     = 1.5,
cex.lab = 1.25,
xlab    = "Date",
ylab    = "Max Temperature (deg C)",
main    = station_name_label)
library("rnoaa")
library("isdparser")
library("lubridate")
library("ncdf4")
library("rnoaa")
library("isdparser")
library("lubridate")
library("ncdf4")
library("ncdf4", lib.loc="/usr/local/lib/R/3.4/site-library")
install.packages(c("backports", "car", "crul", "curl", "data.table", "digest", "dotCall64", "dplyr", "fields", "GEOmap", "glue", "hexbin", "knitr", "lazyeval", "lme4", "lubridate", "MASS", "openssl", "purrr", "quantreg", "Rcpp", "RcppEigen", "RCurl", "reshape2", "rJava", "rlang", "rmarkdown", "rNOMADS", "RPMG", "rprojroot", "sp", "spam", "stringi", "tibble", "tidyr", "tidyselect", "urltools", "XLConnect", "XLConnectJars", "xml2", "yaml"))
install.packages(c("MASS", "mgcv", "rpart"), lib="/usr/local/Cellar/r/3.4.3_1/lib/R/library")
plot(x       = Date[1:3*365],
y       = tmax[1:3*365],
type    = "p",
pch     = ".",   # as points
col     = "red",
lwd     = 1.5,
cex.lab = 1.25,
xlab    = "Date",
ylab    = "Max Temperature (deg C)",
main    = station_name_label)
install.packages(c("rJava", "xml2"))
install.packages("ncdf4")
install.packages("ncdf4")
install.packages("ncdf4")
library("rnoaa")
library("isdparser")
library("lubridate")
library("ncdf4")
library("dplyr")
library("openair")
working_year = 1980
ncdc_ids = ncdc_stations(locationid = 'CITY:US460006',
datasetid  = 'GHCND',
limit      = 1000)
library("rnoaa")
library("isdparser")
library("lubridate")
library("ncdf4")
library("dplyr")
library("openair")
working_year = 1980
ncdc_ids = ncdc_stations(locationid = 'CITY:US460006',
datasetid  = 'GHCND',
limit      = 1000)
