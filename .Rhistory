time_in_netcdf_units = seq(from = time_start_in_seconds,
to   = time_end_in_seconds,
by   =  hourly_interval)
targ_time_series                  = data.frame(date = hour_time)
hourly = na.approx(object = z_all,
x      = index(z_all),
xout   = hour_time)
hourly
hourly = na.approx(object = z_all,
x      = index(z_all),method = "linear",
xout   = hour_time)
hourly
hourly = na.approx(object = z_all,
x      = index(z_all),method = "linear",maxgap = 3,
xout   = hour_time)
hourly
hourly = na.approx(object = z_all,
x      = index(z_all),method = "linear",maxgap = 1,
xout   = hour_time)
hourly
hourly = na.approx(object = z_all,
x      = index(z_all),method = "linear",maxgap = 2,
xout   = hour_time)
hourly
temperature_degC               = zoo(x        = targ_data$temperature,
order.by = targ_data$date_time)
dewpoint_degC                  = zoo(x        = targ_data$temperature_dewpoint,
order.by = targ_data$date_time)
sea_level_pressure_hPa         = zoo(x        = targ_data$air_pressure,
order.by = targ_data$date_time)
wind_speed_meters_per_sec      = zoo(x        = targ_data$wind_speed,
order.by = targ_data$date_time)
wind_direction_degrees_from    = zoo(x        = targ_data$wind_direction,
order.by = targ_data$date_time)
GF1_total_cloud_cover_fraction = zoo(x        = targ_data$GF1_total_cloud_cover_fraction,
order.by = targ_data$date_time)
ISD_precip_01hr_mm             = zoo(x        = targ_data$precip_01hr,
order.by = targ_data$date_time)
raw   = merge(temperature_degC,
dewpoint_degC,
sea_level_pressure_hPa,
wind_speed_meters_per_sec,
wind_direction_degrees_from,
GF1_total_cloud_cover_fraction,
ISD_precip_01hr_mm)
print(raw)
c(year(start_date_for_full_record),year(end_date_for_full_record))
hourly = na.trim(object = hourly,
sides  = "both")
pritn(hourly)
print(hourly)
temperature_degC               = zoo(x        = targ_data$temperature,
order.by = targ_data$date_time)
dewpoint_degC                  = zoo(x        = targ_data$temperature_dewpoint,
order.by = targ_data$date_time)
sea_level_pressure_hPa         = zoo(x        = targ_data$air_pressure,
order.by = targ_data$date_time)
wind_speed_meters_per_sec      = zoo(x        = targ_data$wind_speed,
order.by = targ_data$date_time)
wind_direction_degrees_from    = zoo(x        = targ_data$wind_direction,
order.by = targ_data$date_time)
GF1_total_cloud_cover_fraction = zoo(x        = targ_data$GF1_total_cloud_cover_fraction,
order.by = targ_data$date_time)
ISD_precip_01hr_mm             = zoo(x        = targ_data$precip_01hr,
order.by = targ_data$date_time)
raw   = merge(temperature_degC,
dewpoint_degC,
sea_level_pressure_hPa,
wind_speed_meters_per_sec,
wind_direction_degrees_from,
GF1_total_cloud_cover_fraction,
ISD_precip_01hr_mm)
print(raw)
data_product_code              = zoo(x        = targ_data$type_code,
order.by = targ_data$date_time)
temperature_degC               = zoo(x        = targ_data$temperature,
order.by = targ_data$date_time)
dewpoint_degC                  = zoo(x        = targ_data$temperature_dewpoint,
order.by = targ_data$date_time)
sea_level_pressure_hPa         = zoo(x        = targ_data$air_pressure,
order.by = targ_data$date_time)
wind_speed_meters_per_sec      = zoo(x        = targ_data$wind_speed,
order.by = targ_data$date_time)
wind_direction_degrees_from    = zoo(x        = targ_data$wind_direction,
order.by = targ_data$date_time)
GF1_total_cloud_cover_fraction = zoo(x        = targ_data$GF1_total_cloud_cover_fraction,
order.by = targ_data$date_time)
ISD_precip_01hr_mm             = zoo(x        = targ_data$precip_01hr,
order.by = targ_data$date_time)
raw   = merge(data_product_code,
temperature_degC,
dewpoint_degC,
sea_level_pressure_hPa,
wind_speed_meters_per_sec,
wind_direction_degrees_from,
GF1_total_cloud_cover_fraction,
ISD_precip_01hr_mm)
raw
start_date = as.POSIXct(paste(target_year,
"-01-01 00:00:00 UTC",
sep=""),
tz = "UTC")
end_date   = as.POSIXct(paste((target_year),
"-12-31 23:00:00 UTC",
sep=""),
tz = "UTC")
hour_time = seq.POSIXt(from = max(start_date),
to   = min(end_date),
by   = "1 hour",
tz   = "UTC")
hourly = na.approx(object = raw,
x      = index(z_all),method = "linear",maxgap = 2,
xout   = hour_time)
start_date = as.POSIXct(paste(target_year,
"-01-01 00:00:00 UTC",
sep=""),
tz = "UTC")
end_date   = as.POSIXct(paste((target_year),
"-12-31 23:00:00 UTC",
sep=""),
tz = "UTC")
hour_time = seq.POSIXt(from = max(start_date),
to   = min(end_date),
by   = "1 hour",
tz   = "UTC")
hourly = na.approx(object = raw,
x      = index(hourly),method = "linear",maxgap = 2,
xout   = hour_time)
debugSource('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
debugSource('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
print(stations_near_targ)
debugSource('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
debugSource('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
debugSource('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
debugSource('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
target_year
target_year
start_date = as.POSIXct(paste(target_year,
"-01-01 00:00:00 UTC",
sep=""),
tz = "UTC")
orint(start_date)
print(start_date)
end_date   = as.POSIXct(paste((target_year),
"-12-31 23:00:00 UTC",
sep=""),
tz = "UTC")
print(end_date)
hour_time = seq.POSIXt(from = max(start_date),
to   = min(end_date),
by   = "1 hour",
tz   = "UTC")
hourly
hour_time = seq.POSIXt(from = max(start_date),
)
hour_time = seq.POSIXt(from = max(start_date),
to   = min(end_date),
by   = "1 hour",
tz   = "UTC")
hour_time = seq.POSIXt(from = max(start_date),
to   = min(end_date),
by   = "1 hour",
tz   = "UTC")
hour_time
hourly = na.approx(object = raw,
x      = index(hourly),method = "linear",maxgap = 2,
xout   = hour_time)
hourly = na.approx(object = raw,
x      = index(raw),method = "linear",maxgap = 2,
xout   = hour_time)
hourly = na.approx(object = raw,
x      = index(raw),method = "linear",maxgap = 2,
xout   = hour_time)
hour_time = seq.POSIXt(from = max(start_date),
to   = min(end_date),
by   = "1 hour",
tz   = "UTC")
index(raw)
hourly = na.approx(object = raw,
x      = index(raw),
method = "linear",
maxgap = 2,
xout   = hour_time)
debugSource('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
end_date   = as.POSIXct(paste((target_year),
"-12-31 23:00:00 UTC",
sep=""),
tz = "UTC")
hour_time = seq.POSIXt(from = max(start_date),
to   = min(end_date),
by   = "1 hour",
tz   = "UTC")
end_date   = as.POSIXct(paste((target_year),
"-12-31 23:00:00 UTC",
sep=""),
tz = "UTC")
hour_time = seq.POSIXt(from = max(start_date),
to   = min(end_date),
by   = "1 hour",
tz   = "UTC")
hourly = na.approx(object = raw,
x      = index(raw),
method = "linear",
maxgap = 2,
xout   = hour_time)
raw
hourly = na.approx(object = raw,
x      = index(raw),
method = "linear",
maxgap = 2,
xout   = hour_time)
raw   = merge(temperature_degC,
dewpoint_degC,
sea_level_pressure_hPa,
wind_speed_meters_per_sec,
wind_direction_degrees_from,
GF1_total_cloud_cover_fraction,
ISD_precip_01hr_mm)
start_date = as.POSIXct(paste(target_year,
"-01-01 00:00:00 UTC",
sep=""),
tz = "UTC")
end_date   = as.POSIXct(paste((target_year),
"-12-31 23:00:00 UTC",
sep=""),
tz = "UTC")
hour_time = seq.POSIXt(from = max(start_date),
to   = min(end_date),
by   = "1 hour",
tz   = "UTC")
hourly = na.approx(object = raw,
x      = index(raw),
method = "linear",
maxgap = 2,
xout   = hour_time)
raw   = merge(data_product_code,
temperature_degC,
dewpoint_degC,
sea_level_pressure_hPa,
wind_speed_meters_per_sec,
wind_direction_degrees_from,
GF1_total_cloud_cover_fraction,
ISD_precip_01hr_mm)
hourly = na.trim(object = hourly,
sides  = "both")
hourly
raw   = merge(temperature_degC,
dewpoint_degC,
sea_level_pressure_hPa,
wind_speed_meters_per_sec,
wind_direction_degrees_from,
GF1_total_cloud_cover_fraction,
ISD_precip_01hr_mm)
start_date = as.POSIXct(paste(target_year,
"-01-01 00:00:00 UTC",
sep=""),
tz = "UTC")
end_date   = as.POSIXct(paste((target_year),
"-12-31 23:00:00 UTC",
sep=""),
tz = "UTC")
hour_time = seq.POSIXt(from = max(start_date),
to   = min(end_date),
by   = "1 hour",
tz   = "UTC")
hourly = na.approx(object = raw,
x      = index(raw),
method = "linear",
maxgap = 2,
xout   = hour_time)
prtin(hourly)
print(hourly)
hourly1 = na.trim(object = hourly,
sides = "both"
is.na  = "all")
hourly1 = na.trim(object = hourly,
sides = "both",
is.na  = "all")
print(hourly1)
ho
hourly_interval = as.double(3600)
time_start_in_seconds = as.numeric(interval(start = "2006-01-01 00:00:00 UTC",
end   = min(index(hourly)),
tzone = tz(start)) )
time_end_in_seconds   = as.numeric(interval(start = "2006-01-01 00:00:00 UTC",
end   = max(index(hourly)),
tzone = tz(start)) )
hourly_interval = as.double(3600)
time_start_in_seconds = as.numeric(interval(start = "2006-01-01 00:00:00 UTC",
end   = min(index(hourly)),
tzone = tz(start)) )
time_end_in_seconds   = as.numeric(interval(start = "2006-01-01 00:00:00 UTC",
end   = max(index(hourly)),
tzone = tz(start)) )
print(time_start_in_seconds)
time_end_in_seconds
time_end_in_seconds-time_end_in_seconds
time_end_in_seconds-time_start_in_seconds
31618800/24
debugSource('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
name_of_station   = "ELLSWORTH AFB"
name_of_station   = "ELLSWORTH AFB"
name_of_station   = "ELLSWORTH AFB"
name_of_station   = "ELLSWORTH AFB"
target_usaf = stations_near_targ$usaf[station_list_number]
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
hourly
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
hourly
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
hourly
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
raw   = merge(data_product_code,
temperature_degC,
dewpoint_degC,
sea_level_pressure_hPa,
wind_speed_meters_per_sec,
wind_direction_degrees_from,
GF1_total_cloud_cover_fraction,
ISD_precip_01hr_mm)
output_file_name = paste(storage_directory,
output_file_name_prefix,
"_RAW_",
target_year,
".csv",
sep="")
write.zoo(  x    = row,
file = output_file_name,
sep  =", ",
index.name = "Calendar_Date",
row.names = FALSE)
print(raw$data_product_code)
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
targ_data$date
targ_data$type_code
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
targ_data$date_time[(targ_data$type_code == "SY-SA") || (targ_data$type_code =="SYNOP")] = targ_data$date_time[(targ_data$type_code == "SY-SA") || (targ_data$type_code =="SYNOP")]+ 0.0001
targ_data$type_codewarnings()
warnings()
targ_data$date[(targ_data$type_code == "SY-SA") || (targ_data$type_code =="SYNOP")] = targ_data$date+ 0.0001
(targ_data$type_code == "SY-SA")
(targ_data$type_code =="SYNOP")
targ_data$date_time[(targ_data$type_code == "SY-SA") || (targ_data$type_code =="SYNOP")]
targ_data$date_time[(targ_data$type_code == "SY-SA") || (targ_data$type_code =="SYNOP")]
0.0001
date_time + 0.0001
debugSource('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
targ_data$date_time
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
duplicateds =  duplicated(targ_data$date_time)
print(duplicateds)
debugSource('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
targ_data$date_time = ymd_hm(sprintf("%s %s",
as.character(targ_data$date),
targ_data$time))
test = targ_data$date_time
warnings()
duplicateds =  duplicated(test)
duplicateds
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
anyDuplicated(temperature_degC)
anyDuplicated(sea_level_pressure_hPa)
anyDuplicated(temperature_degC$TS)
data_product_code data_product_code              = zoo(x        = targ_data$type_code,
order.by = targ_data$date_time)
data_product_code              = zoo(x        = targ_data$type_code,
order.by = targ_data$date_time)
lines(aggregate(data_product_code, data_product_code(data_product_code), mean), col = 2)
lines(aggregate(x = data_product_code, by = data_product_code(data_product_code), FUN = mean), col = 2)
temperature_degC               = zoo(x        = targ_data$temperature,
order.by = targ_data$date_time)
lines(aggregate(x = temperature_degC, by = index(temperature_degC), FUN = mean), col = 2)
temperature_degC               = zoo(x        = targ_data$temperature,
order.by = targ_data$date_time)
temperature_degC               = zoo(x        = targ_data$temperature,
order.by = targ_data$date_time)
temperature_degC               = aggregate(x   = temperature_degC,
by  = index(temperature_degC),
FUN = mean)
print(temperature_degC)
temperature_degC               = zoo(x        = targ_data$temperature,
order.by = targ_data$date_time)
temperature_degC2               = aggregate(x   = temperature_degC,
by  = index(temperature_degC),
FUN = mean)
data_product_code              = aggregate(x   = data_product_code,
by  = index(data_product_code),
FUN = mean)
warnings()
data_product_code
data_product_code              = zoo(x        = targ_data$type_code,
order.by = targ_data$date_time)
data_product_code              = aggregate(x   = data_product_code,
by  = index(data_product_code),
FUN = paste)
data_product_code              = zoo(x        = targ_data$type_code,
order.by = targ_data$date_time)
data_product_code
data_product_code              = zoo(x        = targ_data$type_code,
order.by = targ_data$date_time)
data_product_code              = aggregate(x   = data_product_code,
by  = index(data_product_code),
"Merged")
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
data_product_code              = zoo(x        = targ_data$type_code,
order.by = targ_data$date_time)
data_product_code              = aggregate(x   = data_product_code,
by  = index(data_product_code),
FUN = "Merged")
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
data_product_code              = zoo(x        = targ_data$type_code,
order.by = targ_data$date_time)
data_product_code              = aggregate(x   = data_product_code,
by  = index(data_product_code),
FUN = paste0)
data_product_code
mF <- as.formula(paste("cbind(", paste(names(d)[-(1:2)], collapse = ","), ") ~ a + b", sep = ""))
mF <- as.formula(paste(a, sep = "/"))
(fmla <- as.formula(paste("y ~ ", paste(xnam, collapse= "+"))))
data_product_code              = zoo(x        = targ_data$type_code,
order.by = targ_data$date_time)
data_product_code              = aggregate(x   = data_product_code,
by  = index(data_product_code),
FUN = first)
data_product_code              = zoo(x        = targ_data$type_code,
order.by = targ_data$date_time)
data_product_code              = aggregate(x   = data_product_code,
by  = index(data_product_code),
FUN = sub("Merged"))
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
source('~/GitHub/NCDC_rnoaa_ISD/rnoaa_ISD_csv_netcdf_loop.R')
output_file_name = paste(storage_directory,
output_file_name_prefix,
"_RAW_",
target_year,
".csv",
sep="")
print(output_file_name)
write.zoo(  x    = row,
file = output_file_name,
sep  =", ",
index.name = "Calendar_Date",
row.names = FALSE)
raw
as  raw_as_frame = as.data.frame(row)
raw_as_frame = as.data.frame(row)
print(raw_as_frame)
raw_as_frame = as.data.frame(raw)
View(raw_as_frame)
View(raw_as_frame)
row.names(raw_as_frame) = "Calendar_Date"
row.names(raw_as_frame) = "Date"
row.names(raw_as_frame) = "Date"
raw_as_frame = as.data.frame(raw)
row.names(raw_as_frame) = "Date"
write.zoo(  x    = row,
file = output_file_name,
sep  =", ",
index.name = "Calendar_Date",
row.names = FALSE)
