name_of_station   = "Rapid City Regional Airport"
print(stations_near_targ)
target_usaf = 726620
target_wban =  24090
target_year =   2010
station_name_label = paste(name_of_station,
target_year)
output_file_name = paste(file_title_string,
target_year,
".csv",
sep="")
targ_data = isd(usaf = target_usaf,  # your usaf number
wban = target_wban,  # your wban number
year = target_year,  # your year
progress=TRUE)       # shows prograss as you go
print(targ_data)
targ_data$date_time = ymd_hm(sprintf("%s %s",
as.character(targ_data$date),
targ_data$time))
targ_data$date = targ_data$date_time
targ_data$temperature[targ_data$temperature == "+9999"]                   = NA
targ_data$temperature_dewpoint[targ_data$temperature_dewpoint == "+9999"] = NA
targ_data$air_pressure[targ_data$air_pressure == "99999"]                 = NA
targ_data$wind_speed[targ_data$wind_speed == "9999"]                     = NA
targ_data$wind_direction[targ_data$wind_direction == "999"]             = NA
precip_workspace_time_interval = as.numeric(targ_data$AA1_period_quantity_hrs)
precip_workspace_depth         = as.numeric(targ_data$AA1_depth)
precip_workspace_depth[precip_workspace_depth == 9999]                   = NA
precip_workspace_depth_01hrly =  precip_workspace_depth
precip_workspace_depth_03hrly =  precip_workspace_depth
precip_workspace_depth_06hrly =  precip_workspace_depth
precip_workspace_depth_12hrly =  precip_workspace_depth
precip_workspace_depth_24hrly =  precip_workspace_depth
precip_workspace_depth_01hrly[precip_workspace_time_interval != 01]  =  NA
precip_workspace_depth_03hrly[precip_workspace_time_interval != 03]  =  NA
precip_workspace_depth_06hrly[precip_workspace_time_interval != 06]  =  NA
precip_workspace_depth_12hrly[precip_workspace_time_interval != 12]  =  NA
precip_workspace_depth_24hrly[precip_workspace_time_interval != 24]  =  NA
targ_data$precip_01hr = precip_workspace_depth_01hrly
targ_data$precip_03hr = precip_workspace_depth_03hrly
targ_data$precip_06hr = precip_workspace_depth_06hrly
targ_data$precip_12hr = precip_workspace_depth_12hrly
targ_data$precip_24hr = precip_workspace_depth_24hrly
targ_data = isd_transform(targ_data)
# patch the wind direction so it's 0 degrees when the wind speed is missing
targ_data$wind_direction[targ_data$wind_speed == 0]             = 0
targ_data$GF1_total_cloud_cover_fraction = as.numeric(targ_data$GF1_coverage)
# 00: None, SKC or CLR
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==00] = 0.00
# 01: One okta - 1/10 or less but not zero
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==01] = 1.0 / 8.0
# 02: Two oktas - 2/10 ‑ 3/10, or FEW
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==02] = 2.0 / 8.0
# 03: Three oktas - 4/10
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==03] = 3.0 / 8.0
# 04: Four oktas - 5/10, or SCT
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==04] = 4.0 / 8.0
# 05: Five oktas - 6/10
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==05] = 5.0 / 8.0
# 06: Six oktas - 7/10 ‑ 8/10
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==06] = 6.0 / 8.0
# 07: Seven oktas - 9/10 or more but not 10/10, or BKN
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==07] = 7.0 / 8.0
# 08: Eight oktas - 10/10, or OVC
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==08] = 8.0 / 8.0
# 09: Sky obscured, or cloud amount cannot be estimated
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==09] = 8.0 / 8.0
# 10: Partial obscuration
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==10] = 4.0 / 8.0
# 11: Thin scattered
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==11] = 2.0 / 8.0
# 12: Scattered
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==12] = 4.0 / 8.0
# 13: Dark scattered
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==13] = 5.0 / 8.0
# 14: Thin broken
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==14] = 6.0 / 8.0
# 15: Broken
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==15] = 7.0 / 8.0
# 16: Dark broken
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==16] = 8.0 / 8.0
# 17: Thin overcast
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==17] = 4.0 / 8.0
# 18: Overcast
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==18] = 8.0 / 8.0
# 19: Dark overcast
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==19] = 8.0 / 8.0
# 99: Missing
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==99] = NA
plot(x       = targ_data$date_time,
y       = targ_data$temperature,
type    = "l",
col     = "red",
lwd     = 1.5,
cex.lab = 1.25,
xlab    = "Date",
ylab    = "Temperature (deg C)",
main    = station_name_label)
plot(x       = targ_data$date_time,
y       = targ_data$temperature_dewpoint,
type    = "l",
col     = "darkgreen",
lwd     = 1.5,
cex.lab = 1.25,
xlab    = "Date",
ylab    = "Dew Point (deg C)",
main    = station_name_label)
plot(x       = targ_data$date_time,
y       = targ_data$GF1_total_cloud_cover_fraction,
type    = "l",
col     = "grey",
lwd     = 1.5,
cex.lab = 1.25,
xlab    = "Date",
ylab    = "Cloud Cover (fraction)",
main    = station_name_label)
plot(x       = targ_data$date_time,
y       = targ_data$air_pressure,
type    = "l",
col     = "blue",
lwd     = 1.5,
cex.lab = 1.25,
xlab    = "Date",
ylab    = "MSL Pressure (mb)",
main    = station_name_label)
plot(x       = targ_data$date_time,
y       = targ_data$wind_speed,
type    = "l",
col     = "darkblue",
lwd     = 1.5,
cex.lab = 1.25,
xlab    = "Date",
ylab    = "Wind Speed (m s-1)",
main    = station_name_label)
windrose_frame = data.frame(date      = targ_data$date_time,
ws        = targ_data$wind_speed,
wd        = targ_data$wind_direction,
longitude = targ_data$longitude,
latitude  = targ_data$latitude)
windRose(mydata     = windrose_frame,
ws         = "ws",
wd         = "wd",
type       = "year",
hemisphere = "northern",
main       = station_name_label)
windRose(mydata     = windrose_frame,
ws         = "ws",
wd         = "wd",
type       = "season",
hemisphere = "northern",
main       = station_name_label)
start_date = as.POSIXct(paste(target_year,
"-01-01 00:00:00 UTC",
sep=""),
tz = "UTC")
end_date   = as.POSIXct(paste(target_year,
"-12-31 00:00:00 UTC",
sep=""),
tz = "UTC")
hour_time = seq.POSIXt(from = start_date,
to   = end_date,
by   = "1 hour",
tz   = "UTC")
targ_time_series                  = data.frame(date = hour_time)
targ_time_series$temperature_degC = approx(x      = targ_data$date_time,
y      = targ_data$temperature,
method = "linear",
xout   = hour_time)$y
targ_time_series$dewpoint_degC    = approx(x      = targ_data$date_time,
y      = targ_data$temperature_dewpoint,
method = "linear",
xout   = hour_time)$y
targ_time_series$cloud_fraction   = approx(x      = targ_data$date_time,
y      = targ_data$GF1_total_cloud_cover_fraction,
method = "linear",
xout   = hour_time)$y
targ_time_series$press_msl_hPa    = approx(x      = targ_data$date_time,
y      = targ_data$air_pressure,
method = "linear",
xout   = hour_time)$y
targ_time_series$wind_spd_ms      = approx(x      = targ_data$date_time,
y      = targ_data$wind_speed,
method = "linear",
xout   = hour_time)$y
targ_time_series$wind_dir_degrees  = approx(x     = targ_data$date_time,
y      = targ_data$wind_direction,
method = "linear",
xout   = hour_time)$y
targ_time_series$precip_01hr       = approx(x      = targ_data$date_time,
y      = targ_data$precip_01hr,
method = "constant",
xout   = hour_time)$y
print(targ_time_series)
output_file_name = paste(file_title_string,
"_HOURLY_",
target_year,
".csv",
sep="")
write.table(x    = targ_time_series,
file = output_file_name,
sep  =", ",
row.names = FALSE)
targ_time_series_raw                      = data.frame(date = targ_data$date_time)
targ_time_series_raw$temperature_dewpoint = targ_data$temperature_dewpoint
targ_time_series_raw$cloud_cover_fraction = targ_data$GF1_total_cloud_cover_fraction
targ_time_series_raw$air_pressure         = targ_data$air_pressure
targ_time_series_raw$wind_speed       = targ_data$wind_speed
targ_time_series_raw$wind_dir_degrees = targ_data$wind_dir_degrees
targ_time_series_raw$precip_01hr = targ_data$precip_01hr
targ_time_series_raw$precip_03hr = targ_data$precip_03hr
targ_time_series_raw$precip_06hr = targ_data$precip_06hr
targ_time_series_raw$precip_12hr = targ_data$precip_12hr
targ_time_series_raw$precip_24hr = targ_data$precip_24hr
output_file_name = paste(file_title_string,
"_RAW_",
target_year,
".csv",
sep="")
write.table(x    = targ_time_series_raw,
file = output_file_name,
sep  =", ",
row.names = FALSE)
plot(precip_workspace_depth_01hrly)
plot(precip_workspace_depth_24hrly)
targ_time_series                  = data.frame(date = hour_time)
targ_time_series$temperature_degC = approx(x      = targ_data$date_time,
y      = targ_data$temperature,
method = "linear",
xout   = hour_time)$y
targ_time_series$dewpoint_degC    = approx(x      = targ_data$date_time,
y      = targ_data$temperature_dewpoint,
method = "linear",
xout   = hour_time)$y
targ_time_series$cloud_fraction   = approx(x      = targ_data$date_time,
y      = targ_data$GF1_total_cloud_cover_fraction,
method = "linear",
xout   = hour_time)$y
targ_time_series$press_msl_hPa    = approx(x      = targ_data$date_time,
y      = targ_data$air_pressure,
method = "linear",
xout   = hour_time)$y
targ_time_series$wind_spd_ms      = approx(x      = targ_data$date_time,
y      = targ_data$wind_speed,
method = "linear",
xout   = hour_time)$y
targ_time_series$wind_dir_degrees  = approx(x     = targ_data$date_time,
y      = targ_data$wind_direction,
method = "linear",
xout   = hour_time)$y
targ_time_series$ISD_precip_01hr   = approx(x      = targ_data$date_time,
y      = targ_data$precip_01hr,
method = "constant",
xout   = hour_time)$y
targ_time_series$ISD_precip_03hr   = approx(x      = targ_data$date_time,
y      = targ_data$precip_03hr,
method = "constant",
xout   = hour_time)$y
targ_time_series$ISD_precip_06hr   = approx(x      = targ_data$date_time,
y      = targ_data$precip_06hr,
method = "constant",
xout   = hour_time)$y
targ_time_series$ISD_precip_12hr   = approx(x      = targ_data$date_time,
y      = targ_data$precip_12hr,
method = "constant",
xout   = hour_time)$y
library("lubridate")
library("isdparser")
library("rnoaa")
library("openair")
library("ncdf4")
stations_near_targ = isd_stations_search(lat    =   44,  # degrees_north
lon    = -103,  # degrees_east
radius =  100)  # km
file_title_string = "KRAP"
name_of_station   = "Rapid City Regional Airport"
print(stations_near_targ)
target_usaf = 726620
target_wban =  24090
target_year =   2010
station_name_label = paste(name_of_station,
target_year)
output_file_name = paste(file_title_string,
target_year,
".csv",
sep="")
targ_data = isd(usaf = target_usaf,  # your usaf number
wban = target_wban,  # your wban number
year = target_year,  # your year
progress=TRUE)       # shows prograss as you go
print(targ_data)
targ_data$date_time = ymd_hm(sprintf("%s %s",
as.character(targ_data$date),
targ_data$time))
targ_data$date = targ_data$date_time
targ_data$temperature[targ_data$temperature == "+9999"]                   = NA
targ_data$temperature_dewpoint[targ_data$temperature_dewpoint == "+9999"] = NA
targ_data$air_pressure[targ_data$air_pressure == "99999"]                 = NA
targ_data$wind_speed[targ_data$wind_speed == "9999"]                     = NA
targ_data$wind_direction[targ_data$wind_direction == "999"]             = NA
precip_workspace_time_interval = as.numeric(targ_data$AA1_period_quantity_hrs)
precip_workspace_depth         = as.numeric(targ_data$AA1_depth)
precip_workspace_depth[precip_workspace_depth == 9999]                   = NA
precip_workspace_depth_01hrly =  precip_workspace_depth
precip_workspace_depth_03hrly =  precip_workspace_depth
precip_workspace_depth_06hrly =  precip_workspace_depth
precip_workspace_depth_12hrly =  precip_workspace_depth
precip_workspace_depth_24hrly =  precip_workspace_depth
precip_workspace_depth_01hrly[precip_workspace_time_interval != 01]  =  NA
precip_workspace_depth_03hrly[precip_workspace_time_interval != 03]  =  NA
precip_workspace_depth_06hrly[precip_workspace_time_interval != 06]  =  NA
precip_workspace_depth_12hrly[precip_workspace_time_interval != 12]  =  NA
precip_workspace_depth_24hrly[precip_workspace_time_interval != 24]  =  NA
targ_data$precip_01hr = precip_workspace_depth_01hrly
targ_data$precip_03hr = precip_workspace_depth_03hrly
targ_data$precip_06hr = precip_workspace_depth_06hrly
targ_data$precip_12hr = precip_workspace_depth_12hrly
targ_data$precip_24hr = precip_workspace_depth_24hrly
targ_data = isd_transform(targ_data)
# patch the wind direction so it's 0 degrees when the wind speed is missing
targ_data$wind_direction[targ_data$wind_speed == 0]             = 0
targ_data$GF1_total_cloud_cover_fraction = as.numeric(targ_data$GF1_coverage)
# 00: None, SKC or CLR
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==00] = 0.00
# 01: One okta - 1/10 or less but not zero
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==01] = 1.0 / 8.0
# 02: Two oktas - 2/10 ‑ 3/10, or FEW
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==02] = 2.0 / 8.0
# 03: Three oktas - 4/10
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==03] = 3.0 / 8.0
# 04: Four oktas - 5/10, or SCT
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==04] = 4.0 / 8.0
# 05: Five oktas - 6/10
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==05] = 5.0 / 8.0
# 06: Six oktas - 7/10 ‑ 8/10
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==06] = 6.0 / 8.0
# 07: Seven oktas - 9/10 or more but not 10/10, or BKN
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==07] = 7.0 / 8.0
# 08: Eight oktas - 10/10, or OVC
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==08] = 8.0 / 8.0
# 09: Sky obscured, or cloud amount cannot be estimated
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==09] = 8.0 / 8.0
# 10: Partial obscuration
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==10] = 4.0 / 8.0
# 11: Thin scattered
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==11] = 2.0 / 8.0
# 12: Scattered
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==12] = 4.0 / 8.0
# 13: Dark scattered
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==13] = 5.0 / 8.0
# 14: Thin broken
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==14] = 6.0 / 8.0
# 15: Broken
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==15] = 7.0 / 8.0
# 16: Dark broken
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==16] = 8.0 / 8.0
# 17: Thin overcast
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==17] = 4.0 / 8.0
# 18: Overcast
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==18] = 8.0 / 8.0
# 19: Dark overcast
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==19] = 8.0 / 8.0
# 99: Missing
targ_data$GF1_total_cloud_cover_fraction[targ_data$GF1_total_cloud_cover_fraction==99] = NA
plot(x       = targ_data$date_time,
y       = targ_data$temperature,
type    = "l",
col     = "red",
lwd     = 1.5,
cex.lab = 1.25,
xlab    = "Date",
ylab    = "Temperature (deg C)",
main    = station_name_label)
plot(x       = targ_data$date_time,
y       = targ_data$temperature_dewpoint,
type    = "l",
col     = "darkgreen",
lwd     = 1.5,
cex.lab = 1.25,
xlab    = "Date",
ylab    = "Dew Point (deg C)",
main    = station_name_label)
plot(x       = targ_data$date_time,
y       = targ_data$GF1_total_cloud_cover_fraction,
type    = "l",
col     = "grey",
lwd     = 1.5,
cex.lab = 1.25,
xlab    = "Date",
ylab    = "Cloud Cover (fraction)",
main    = station_name_label)
plot(x       = targ_data$date_time,
y       = targ_data$air_pressure,
type    = "l",
col     = "blue",
lwd     = 1.5,
cex.lab = 1.25,
xlab    = "Date",
ylab    = "MSL Pressure (mb)",
main    = station_name_label)
plot(x       = targ_data$date_time,
y       = targ_data$wind_speed,
type    = "l",
col     = "darkblue",
lwd     = 1.5,
cex.lab = 1.25,
xlab    = "Date",
ylab    = "Wind Speed (m s-1)",
main    = station_name_label)
windrose_frame = data.frame(date      = targ_data$date_time,
ws        = targ_data$wind_speed,
wd        = targ_data$wind_direction,
longitude = targ_data$longitude,
latitude  = targ_data$latitude)
windRose(mydata     = windrose_frame,
ws         = "ws",
wd         = "wd",
type       = "year",
hemisphere = "northern",
main       = station_name_label)
windRose(mydata     = windrose_frame,
ws         = "ws",
wd         = "wd",
type       = "season",
hemisphere = "northern",
main       = station_name_label)
start_date = as.POSIXct(paste(target_year,
"-01-01 00:00:00 UTC",
sep=""),
tz = "UTC")
end_date   = as.POSIXct(paste(target_year,
"-12-31 00:00:00 UTC",
sep=""),
tz = "UTC")
hour_time = seq.POSIXt(from = start_date,
to   = end_date,
by   = "1 hour",
tz   = "UTC")
targ_time_series                  = data.frame(date = hour_time)
targ_time_series$temperature_degC = approx(x      = targ_data$date_time,
y      = targ_data$temperature,
method = "linear",
xout   = hour_time)$y
targ_time_series$dewpoint_degC    = approx(x      = targ_data$date_time,
y      = targ_data$temperature_dewpoint,
method = "linear",
xout   = hour_time)$y
targ_time_series$cloud_fraction   = approx(x      = targ_data$date_time,
y      = targ_data$GF1_total_cloud_cover_fraction,
method = "linear",
xout   = hour_time)$y
targ_time_series$press_msl_hPa    = approx(x      = targ_data$date_time,
y      = targ_data$air_pressure,
method = "linear",
xout   = hour_time)$y
targ_time_series$wind_spd_ms      = approx(x      = targ_data$date_time,
y      = targ_data$wind_speed,
method = "linear",
xout   = hour_time)$y
targ_time_series$wind_dir_degrees  = approx(x     = targ_data$date_time,
y      = targ_data$wind_direction,
method = "linear",
xout   = hour_time)$y
targ_time_series$ISD_precip_01hr   = approx(x      = targ_data$date_time,
y      = targ_data$precip_01hr,
method = "constant",
xout   = hour_time)$y
targ_time_series$ISD_precip_03hr   = approx(x      = targ_data$date_time,
y      = targ_data$precip_03hr,
method = "constant",
xout   = hour_time)$y
targ_time_series$ISD_precip_06hr   = approx(x      = targ_data$date_time,
y      = targ_data$precip_06hr,
method = "constant",
xout   = hour_time)$y
#targ_time_series$ISD_precip_12hr   = approx(x      = targ_data$date_time,
#                                            y      = targ_data$precip_12hr,
#                                            method = "constant",
#                                            xout   = hour_time)$y
targ_time_series$ISD_precip_24hr   = approx(x      = targ_data$date_time,
y      = targ_data$precip_24hr,
method = "constant",
xout   = hour_time)$y
print(targ_time_series)
output_file_name = paste(file_title_string,
"_HOURLY_",
target_year,
".csv",
sep="")
write.table(x    = targ_time_series,
file = output_file_name,
sep  =", ",
row.names = FALSE)
targ_time_series_raw                      = data.frame(date = targ_data$date_time)
targ_time_series_raw$temperature_dewpoint = targ_data$temperature_dewpoint
targ_time_series_raw$cloud_cover_fraction = targ_data$GF1_total_cloud_cover_fraction
targ_time_series_raw$air_pressure         = targ_data$air_pressure
targ_time_series_raw$wind_speed       = targ_data$wind_speed
targ_time_series_raw$wind_dir_degrees = targ_data$wind_direction
targ_time_series_raw$ISD_precip_01hr = targ_data$precip_01hr
targ_time_series_raw$ISD_precip_03hr = targ_data$precip_03hr
targ_time_series_raw$ISD_precip_06hr = targ_data$precip_06hr
targ_time_series_raw$ISD_precip_12hr = targ_data$precip_12hr
targ_time_series_raw$ISD_precip_24hr = targ_data$precip_24hr
output_file_name = paste(file_title_string,
"_RAW_",
target_year,
".csv",
sep="")
write.table(x    = targ_time_series_raw,
file = output_file_name,
sep  =", ",
row.names = FALSE)
